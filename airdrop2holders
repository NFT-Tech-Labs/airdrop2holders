import subprocess
import json
import sys
import argparse
import os

def main(argv):
    parser = argparse.ArgumentParser(description="Airdrop a specified token to current holders of an NFT collection.")
    parser.add_argument('candymachineid', help="The Candy Machine ID of the collection, the holders of which you want to airdrop to. If using a list instead, enter 'none'")
    parser.add_argument('tokenamount', help="The number of tokens you want to airdrop to each holder.", type=int)
    parser.add_argument('tokenaddress', help="The token address of the token you wish to airdrop.")
    parser.add_argument('-s', '--startatholder', help="The holder number that you want to start the airdrop at (useful if an airdrop fails midway and must be restarted).", type=int, default=0)
    parser.add_argument('--v2', help="Use if your collection uses Candy Machine V2.", action="store_true")
    parser.add_argument('-l', '--list', help="Path to JSON file containing a list of wallet addresses - overrides NFT holders lookup", type=str)
    parser.add_argument('-b', '--blacklist', help="Path to JSON file containing a blacklist of wallet addresses you do not wish to drop to", type=str)
    parser.add_argument('-f', '--force', help="WARNING: SCRIPT WILL RUN WITHOUT SAFETY INPUTS. Will automatically refresh holders if no list is provided and retry failed transactions until they are successful.", action="store_true")
    parsed_args = parser.parse_args()

    candy_machine_id = parsed_args.candymachineid
    token_amount = parsed_args.tokenamount
    token_address = parsed_args.tokenaddress
    start_at_holder = 0
    if parsed_args.startatholder > 0:
        start_at_holder = (parsed_args.startatholder-1)
    
    send_to = None

    if not parsed_args.list:
        if not parsed_args.force:
            if os.path.isfile(candy_machine_id+"_holders.json"):
                while True:
                    try:
                        refresh_holders = input("Existing holders cache found for candy machine with id " + candy_machine_id + ", would you like to refresh? Y/N\n")
                        if refresh_holders == "Y":
                            os.remove(candy_machine_id+"_holders.json")
                            get_holders(candy_machine_id, parsed_args.v2)
                            break
                        elif refresh_holders == "N":
                            break
                        else:
                            raise ValueError

                    except ValueError:
                        print("Invalid input, please input Y/N")
                        continue
            else:
                get_holders(candy_machine_id, parsed_args.v2)
        else:
            if os.path.isfile(candy_machine_id+"_holders.json"):
                os.remove(candy_machine_id+"_holders.json")
            get_holders(candy_machine_id, parsed_args.v2)
            
        send_to = candy_machine_id+"_holders.json"
    else:
        send_to = parsed_args.list
    
    try:
        with open(send_to, 'r+') as f:
            holders_original = json.load(f)
            holders = {}

            if len(holders_original) == 0:
                sys.exit('No holders found')

            blacklist = ""
            if parsed_args.blacklist:
                try:
                    blacklist = open(parsed_args.blacklist, "r").read()
                except FileNotFoundError:
                    if not parsed_args.force:
                        while True:
                            try:
                                blacklist_input = input("Could not get blacklist. Would you like to continue without blacklist? Y/N\n")
                                if blacklist_input == "Y":
                                    blacklist = ""
                                    break
                                elif blacklist_input == "N":
                                    sys.exit("Airdrop cancelled")
                                else:
                                    raise ValueError

                            except ValueError:
                                print("Invalid input, please input Y/N")
                                continue
                    else:
                        sys.exit("Blacklist not found. Cancelling airdrop.")

            if(parsed_args.list):
                for holder in holders_original:
                    if holder not in blacklist:
                        holders[holder] = holders.get(holder, 0) + 1
            else:
                for holder in holders_original:
                    if holder['owner_wallet'] not in blacklist:
                        holders[holder['owner_wallet']] = holders.get(holder['owner_wallet'], 0) + 1
            while True:
                if((start_at_holder+1) < 1 or (start_at_holder+1) > len(holders)):
                    sys.exit("Starting holder must be between 1 and the maximum number of holders")
                elif(start_at_holder > 0):
                    delete = {}
                    for i, holder in enumerate(holders):
                        if(i<start_at_holder):
                            delete[holder] = holders[holder]
                        else:
                            break
                    for holder in delete: del holders[holder]
                try:
                    send_confirm = None
                    if not parsed_args.list:
                        if not parsed_args.force:
                            send_confirm = input("You are about to send " + str(token_amount) + " tokens of type " + token_address + " to " + str(len(holders)) + " holders of " + str(sum(holders.values())) + " NFTs, for a total of " + str(token_amount * (sum(holders.values()))) + " tokens. Do you want to continue? Y/N\n")
                        else:
                            print("Sending " + str(token_amount) + " tokens of type " + token_address + " to " + str(len(holders)) + " holders of " + str(sum(holders.values())) + " NFTs, for a total of " + str(token_amount * (sum(holders.values()))) + " tokens.\n")
                    else:
                        if not parsed_args.force:
                            send_confirm = input("You are about to send " + str(token_amount) + " tokens of type " + token_address + " to " + str(len(holders)) + " wallets, for a total of " + str(token_amount * (sum(holders.values()))) + " tokens. Do you want to continue? Y/N\n")
                        else:
                            print("Sending " + str(token_amount) + " tokens of type " + token_address + " to " + str(len(holders)) + " wallets for a total of " + str(token_amount * (sum(holders.values()))) + " tokens.\n")

                    if send_confirm == "Y" or (send_confirm == None and parsed_args.force):
                        holder_count = start_at_holder
                        
                        for address in holders:
                            sent = False
                            attempt_count = 0
                            while sent == False:
                                print("Sending to holder " + str(holder_count + 1))
                                transaction = ""
                                try:
                                    send_token = subprocess.Popen(["spl-token", "transfer", "--fund-recipient", "--allow-unfunded-recipient", token_address, str(token_amount*holders[address]), address], stdout=subprocess.PIPE ,stderr=subprocess.STDOUT)
                                    sender = ""
                                    while True:
                                        output = send_token.stdout.readline()
                                        if send_token.poll() is not None and output == b'':
                                            break
                                        if output:
                                            print(str(output.strip())[2:len(str(output.strip()))-1])
                                            if "Sender: " in str(output.strip()):
                                                sender = str(output.strip()).split("Sender: ",1)[1][0:-1]
                                            elif "Recipient associated token account: " in str(output.strip()) and sender != "":
                                                if sender in str(output.strip()):
                                                    send_token.terminate()
                                                    raise ValueError("Sender is recipient, skipping.")
                                            elif "Error" in str(output.strip()) or "Account could not be parsed" in str(output.strip()):
                                                raise ValueError(str(output.strip())[2:len(str(output.strip()))-1])
                                            elif"unable to confirm transaction. This can happen in situations such as transaction expiration and insufficient fee-payer funds" in str(output.strip()):
                                                raise ValueError("unable to confirm transaction.")
                                            transaction += str(output.strip())[2:-1]

                                    if "Signature" in transaction:
                                        sent = True
                                        holder_count = holder_count + 1
                                    elif attempt_count == 2 and not parsed_args.force:
                                        while True:
                                            skip = input("Transaction failed after 3 attempts. Would you like to retry, skip this holder, or cancel the airdrop? Retry/Skip/Cancel\n")
                                            
                                            if skip == "Skip":
                                                sent = True
                                                holder_count = holder_count + 1
                                                break
                                            elif skip == "Cancel":
                                                sys.exit("\nAirdrop cancelled at holder " + str(holder_count+1) + ". To retry this airdrop from holder " + str(holder_count+1) + ", rerun the command with the option '-s " + str(holder_count+1) + "' without refreshing the holders cache.\n")
                                            elif skip == "Retry":
                                                attempt_count = 0
                                                break
                                            else:
                                                print("Invalid input, please input Retry/Skip/Cancel")
                                                continue

                                    else:
                                        print("Send failed. Retrying")
                                        attempt_count = attempt_count + 1                                        
                                    
                                except ValueError as exc:
                                    if "insufficient funds" in exc.args[0]:
                                        sys.exit("\nWallet ran out of funds at holder " + str(holder_count + 1) + ". Fund sender wallet and retry from holder " + str(holder_count + 1) + " by rerunning the command with the option '-s " + str(holder_count + 1) + "' without refreshing the holders cache.\n")
                                    elif "Account could not be parsed as token account:" in exc.args[0]:
                                        sys.exit("\nAccount could not be parsed as token account for token " + token_address + "\n")
                                    elif "Sender is recipient, skipping." in exc.args[0]:
                                        print("\n" + exc.args[0] + "\n")
                                        holder_count = holder_count + 1
                                        sent = True 
                                    elif "unable to confirm transaction." in exc.args[0]:
                                        print("\n" + "Continuing to next transaction." + "\n")
                                        holder_count = holder_count + 1
                                        sent = True
                        break
                    
                    elif send_confirm == "N":
                        print("Airdrop cancelled")
                        break
                    else:
                        raise ValueError
                        
                except ValueError:
                    print("Invalid input, please input Y/N")
                    continue

    except FileNotFoundError:
        sys.exit('Failed to get holders')

def get_holders(candy_machine_id, v2):
    if v2:
        holders = subprocess.Popen(["metaboss", "-T", "180", "snapshot", "holders", "--creator", candy_machine_id, "--v2"])
    else:
        holders = subprocess.Popen(["metaboss", "-T", "180", "snapshot", "holders", "--creator", candy_machine_id])
    holders.wait()

if __name__ == "__main__":
   main(sys.argv[1:])

